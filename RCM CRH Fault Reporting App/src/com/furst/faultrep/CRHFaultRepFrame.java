/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.furst.faultrep;

import com.furst.faultrep.db.Database;
import com.furst.faultrep.menus.AppMenuPrimaryEntry;
import com.furst.faultrep.tables.FailureTableModel;
import com.furst.faultrep.tables.MaintDataItemSearchTableModel;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;

import java.sql.ResultSet;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;

import java.util.HashMap;

import java.util.Iterator;
import java.util.List;

import java.util.Map;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.xml.XMLConstants;
import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import static org.apache.xerces.jaxp.JAXPConstants.JAXP_SCHEMA_LANGUAGE;
import static org.apache.xerces.jaxp.JAXPConstants.W3C_XML_SCHEMA;
import org.apache.xerces.util.XMLCatalogResolver;
import org.apache.xml.resolver.tools.CatalogResolver;
import org.pushingpixels.flamingo.api.common.JCommandButton;
import org.pushingpixels.flamingo.api.common.icon.ImageWrapperResizableIcon;
import org.pushingpixels.flamingo.api.common.icon.ResizableIcon;
import org.pushingpixels.flamingo.api.ribbon.JRibbonBand;
import org.pushingpixels.flamingo.api.ribbon.JRibbonFrame;
import org.pushingpixels.flamingo.api.ribbon.RibbonApplicationMenu;
import org.pushingpixels.flamingo.api.ribbon.RibbonApplicationMenuEntrySecondary;
import org.pushingpixels.flamingo.api.ribbon.RibbonElementPriority;
import org.pushingpixels.flamingo.api.ribbon.RibbonTask;
import org.pushingpixels.flamingo.api.ribbon.resize.CoreRibbonResizePolicies;
import org.pushingpixels.flamingo.api.ribbon.resize.IconRibbonBandResizePolicy;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;

/**
 *
 * @author tfurst
 */
public class CRHFaultRepFrame extends JRibbonFrame {

    /**
     * Creates new form CRHFaultRepFrame
     */
    private String URL = "jdbc:sqlite:db/";
    private String cur_db = "None";
    private boolean dbSelected = false;

    public CRHFaultRepFrame() {
        initComponents();
        initDb();
        initXpath();
        this.setApplicationIcon(getIcon("rcmLogoNoBg32x32.png"));
        setRibbon();
    }

    public void setDb(String dbName) {
        cur_db = dbName;
        dbSelected = true;
        dbLabel.setText("Currently selected DB: " + cur_db);
        b1.setEnabled(dbSelected);
        b1a.setEnabled(dbSelected);
    }

    private ResizableIcon getIcon(String res) {
        String resource = "com/furst/faultrep/icons/" + res;
        return ImageWrapperResizableIcon.getIcon(CRHFaultRepFrame.class.getClassLoader().getResource(resource), new Dimension(32, 32));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        dbLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        List<String[]> dummy = new ArrayList<String[]>();
        String[] dummyArr = new String[]{"",""};
        dummy.add(dummyArr);
        mdModel = new MaintDataItemSearchTableModel(dummy);
        jTable1 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRH Fault Reporting DB Tool");
        setMinimumSize(new java.awt.Dimension(100, 75));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Maintenance Data Item Search"));

        jLabel1.setText("Search by ID: ");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel2.setText("Search by Description:");

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jLabel6.setText("Search by Report Date:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Maintenance Data Item Properties"));

        jLabel3.setText("Description: ");

        jLabel4.setText("Generated Date:");

        jLabel5.setText("Data Module: ");

        jTextField5.setEditable(false);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Notes"));

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane5.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jButton1.setText("Add/Update DMC");

        jLabel7.setText("Element ID:");

        jTextField6.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dbLabel.setText("Currently selected DB: " + cur_db);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dbLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dbLabel)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        jPanel6.setPreferredSize(new java.awt.Dimension(500, 579));

        jTable1.setSelectionMode(SINGLE_INTERVAL_SELECTION);
        jTable1.getSelectionModel().addListSelectionListener(new SrchRowListener(jTable1));
        jTable1.setModel(mdModel);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Database Statistics", jPanel8);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Systems Listed in IETM REport", jPanel9);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Fault Reporting Data Modules (411/413)", jPanel10);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(jPanel6);

        jPanel11.setPreferredSize(new java.awt.Dimension(695, 769));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Failure List"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Procedure Output List")));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Alias List"));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("IBIT List"));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel11);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1277, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        searchDB();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        // TODO add your handling code here:
        searchDB();
    }//GEN-LAST:event_jTextField2KeyReleased

    private void searchDB() {
        String searchBoth = "SELECT md_id, descr FROM maintenanceData WHERE md_id LIKE ? AND descr LIKE ?";
        String searchId = "SELECT md_id, descr FROM maintenanceData WHERE md_id LIKE ?";
        String searchDescr = "SELECT md_id, descr FROM maintenanceData WHERE descr LIKE ?";

        try (Connection con = Database.getConnection(URL + cur_db + ".db")) {
            if (jTextField1.getText().equals("")) {
                PreparedStatement descrStm = con.prepareStatement(searchDescr);
                descrStm.setString(1, jTextField2.getText().trim() + "%");

                ResultSet rs = descrStm.executeQuery();
                ArrayList<String[]> retVals = new ArrayList();
                while (rs.next()) {
                    String id = rs.getString("md_id");
                    String descr = rs.getString("descr");
                    retVals.add(new String[]{id, descr});
                }
                /*
                    MaintIdSearchTableModel mod = new MaintIdSearchTableModel(ids);
                srchTable.setModel(mod);
                 */
                MaintDataItemSearchTableModel model = new MaintDataItemSearchTableModel(retVals);
                jTable1.setModel(model);
            } else if (!jTextField1.getText().equals("") && jTextField2.getText().equals("")) {
                PreparedStatement descrStm = con.prepareStatement(searchId);
                descrStm.setString(1, jTextField1.getText().trim() + "%");

                ResultSet rs = descrStm.executeQuery();
                ArrayList<String[]> retVals = new ArrayList();
                while (rs.next()) {
                    String id = rs.getString("md_id");
                    String descr = rs.getString("descr");
                    retVals.add(new String[]{id, descr});
                }
                /*
                    MaintIdSearchTableModel mod = new MaintIdSearchTableModel(ids);
                srchTable.setModel(mod);
                 */
                MaintDataItemSearchTableModel model = new MaintDataItemSearchTableModel(retVals);
                jTable1.setModel(model);
            } else {
                PreparedStatement descrStm = con.prepareStatement(searchBoth);
                descrStm.setString(1, jTextField1.getText().trim() + "%");
                descrStm.setString(2, jTextField2.getText().trim() + "%");

                ResultSet rs = descrStm.executeQuery();
                ArrayList<String[]> retVals = new ArrayList();
                while (rs.next()) {
                    String id = rs.getString("md_id");
                    String descr = rs.getString("descr");
                    retVals.add(new String[]{id, descr});
                }
                /*
                    MaintIdSearchTableModel mod = new MaintIdSearchTableModel(ids);
                srchTable.setModel(mod);
                 */
                MaintDataItemSearchTableModel model = new MaintDataItemSearchTableModel(retVals);
                jTable1.setModel(model);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CRHFaultRepFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CRHFaultRepFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CRHFaultRepFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CRHFaultRepFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CRHFaultRepFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CRHFaultRepFrame().setVisible(true);
            }
        });
    }

    private void createNewDb() {
        String dbName = JOptionPane.showInputDialog(this, "Name for new database:", "Provide databse name", JOptionPane.INFORMATION_MESSAGE);
        //System.out.println("The name = " + dbName + " .");
        //URL = URL + dbName + ".db";
        JOptionPane.showMessageDialog(this, URL);
        try (Connection con = Database.getConnection(URL + dbName + ".db")) {
            if (con != null) {
                createTables(con);
                int res = JOptionPane.showConfirmDialog(this, "Make the new DB the curent in use DB?", "Make a choice", JOptionPane.YES_NO_OPTION);
                if (res == JOptionPane.YES_OPTION) {
                    setDb(dbName);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(CRHFaultRepFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void createTables(Connection con) throws SQLException {
        /*
            Strings for database table dropping and creation
         */
        String dropAliases = "DROP TABLE IF EXISTS aliases";
        String createAliases = "CREATE TABLE \"aliases\" (\"al_id\" INTEGER PRIMARY KEY  NOT NULL  DEFAULT (null) ,\"al_name\" VARCHAR,\"al_source\" VARCHAR,\"det_sys\" VARCHAR DEFAULT (null) ,\"evidence\" VARCHAR,\"name\" VARCHAR,\"po_ref_id\" VARCHAR);";
        String dropComps = "DROP TABLE IF EXISTS components";
        String createComps = "CREATE TABLE \"components\" (\"comp_id\" VARCHAR PRIMARY KEY  NOT NULL , \"comp_name\" VARCHAR)";
        String dropFailures = "DROP TABLE IF EXISTS failures";
        String createFailures = "CREATE TABLE \"failures\" (\"f_id\" VARCHAR PRIMARY KEY  NOT NULL ,\"f_name\" VARCHAR,\"f_ratio\" DOUBLE,\"system\" VARCHAR,\"comp_id\" VARCHAR,\"comp_fail_rate\" DOUBLE,\"maint_task_id\" VARCHAR DEFAULT (null) , \"maint_data_id\" VARCHAR)";
        String dropMaintTasks = "DROP TABLE IF EXISTS maintTasks";
        String createMaintTasks = "CREATE TABLE \"maintTasks\" (\"maint_task_id\" VARCHAR PRIMARY KEY  NOT NULL , \"maint_task_name\" VARCHAR)";
        String dropMaintData = "DROP TABLE IF EXISTS maintenanceData";
        String createMaintData = "CREATE TABLE \"maintenanceData\" (\"md_id\" VARCHAR PRIMARY KEY  NOT NULL ,\"descr\" VARCHAR DEFAULT (null) ,\"gen_date\" VARCHAR DEFAULT (null) ,\"fr_dmc\" VARCHAR,\"notes\" VARCHAR DEFAULT (null) ,\"rep_date_ref\" VARCHAR)";
        String dropProOutputs = "DROP TABLE IF EXISTS procedureOutputs";
        String createProOutputs = "CREATE TABLE \"procedureOutputs\" (\"po_id\" VARCHAR PRIMARY KEY  NOT NULL , \"po_name\" VARCHAR, \"maint_data_id\" VARCHAR)";
        String dropReports = "DROP TABLE IF EXISTS reports";
        String createReports = "CREATE TABLE \"reports\" (\"rep_type\" VARCHAR,\"rep_date\" VARCHAR PRIMARY KEY  NOT NULL  DEFAULT (null) )";
        String dropIbits = "DROP TABLE IF EXISTS ibits";
        String createIbits = "CREATE TABLE \"ibits\" (\"ibit_id\" INTEGER PRIMARY KEY  NOT NULL , \"ibit_comp_id\" VARCHAR, \"md_id\" VARCHAR)";

        String[] statements = new String[]{dropAliases, createAliases, dropComps, createComps, dropFailures, createFailures, dropMaintTasks, createMaintTasks, dropMaintData, createMaintData, dropProOutputs, createProOutputs, dropReports, createReports, dropIbits, createIbits};

        /*
            Statement for connection to execute the the drop and create strings
         */
        Statement stm = con.createStatement();
        /*
            Execution of statements
         */
        for (String statement : statements) {
            stm.execute(statement);
        }
    }

    private void initDb() {
        try {
            resolver = new CatalogResolver();
            eHandler = new DocumentErrorHandler();
            XMLCatalogResolver xres = createXMLCatalogResolver(resolver);
            DBF = DocumentBuilderFactory.newInstance();
            DBF.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
            DBF.setNamespaceAware(true);
            DB = DBF.newDocumentBuilder();
            DB.setEntityResolver(xres);
            DB.setErrorHandler(eHandler);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(CRHFaultRepFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private XMLCatalogResolver createXMLCatalogResolver(CatalogResolver resolver) {
        int i = 0;

        Vector files = resolver.getCatalog().getCatalogManager().getCatalogFiles();
        String[] catalogs = new String[files.size()];
        XMLCatalogResolver xcr = new XMLCatalogResolver();

        for (Object file : files) {
            catalogs[i] = new File(file.toString()).getAbsolutePath();
        }

        xcr.setCatalogList(catalogs);
        return xcr;
    }

    private void initXpath() {
        XPF = XPathFactory.newInstance();
        XP = XPF.newXPath();

        XP.setNamespaceContext(new NamespaceContext() {
            @Override
            public String getNamespaceURI(String prefix) {
                if (prefix == null) {
                    throw new NullPointerException("Null prefix");
                } else if ("xsi".equals(prefix)) {
                    return "http://www.w3.org/2001/XMLSchema-instance";
                } else if ("xml".equals(prefix)) {
                    return XMLConstants.XML_NS_URI;
                } else {
                    return XMLConstants.NULL_NS_URI;
                }
            }

            @Override
            public String getPrefix(String namespaceURI) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Iterator getPrefixes(String namespaceURI) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }

    private void freshUpdate() {
        String path = null;
        int res = jFileChooser1.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            path = jFileChooser1.getSelectedFile().getAbsolutePath();
        }
        final File XML = new File(path);
        final String repDateXp = "//report/reportDate";
        final String repTypeXp = "//report/reportType";
        final String maintDataXp = "//maintenanceData";
        final String failureXp = "//failure";
        final String proOutXp = "//procedureOutput";
        final String aliasXp = "//alias";
        final String ibitXp = "//ibit";
        final String maintTaskIdXp = "//maintenanceTaskId";
        final String hwCompIdXp = "//hwComponentId";

        jProgressBar1.setStringPainted(true);
        jProgressBar1.setString("Parsing IETM Report...");
        SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>() {

            @Override
            protected Boolean doInBackground() {
                jProgressBar1.setIndeterminate(true);
                Map<String, String> hwComps = new HashMap();
                Map<String, String> maintTasks = new HashMap();
                Map<String, String> ibits = new HashMap();
                Map<String, String[]> proOutMap = new HashMap();
                try {
                    Document doc = DB.parse(XML);
                    Node repDateNode = (Node) XP.compile(repDateXp).evaluate(doc, XPathConstants.NODE);
                    Node repTypeNode = (Node) XP.compile(repTypeXp).evaluate(doc, XPathConstants.NODE);
                    NodeList maintDataNodes = (NodeList) XP.compile(maintDataXp).evaluate(doc, XPathConstants.NODESET);
                    NodeList failureNodes = (NodeList) XP.compile(failureXp).evaluate(doc, XPathConstants.NODESET);
                    NodeList proOutNodes = (NodeList) XP.compile(proOutXp).evaluate(doc, XPathConstants.NODESET);
                    NodeList aliasNodes = (NodeList) XP.compile(aliasXp).evaluate(doc, XPathConstants.NODESET);
                    NodeList ibitNodes = (NodeList) XP.compile(ibitXp).evaluate(doc, XPathConstants.NODESET);
                    NodeList maintTaskIds = (NodeList) XP.compile(maintTaskIdXp).evaluate(doc, XPathConstants.NODESET);
                    NodeList hwCompIds = (NodeList) XP.compile(hwCompIdXp).evaluate(doc, XPathConstants.NODESET);

                    String repDate = repDateNode.getTextContent();
                    String repType = repTypeNode.getTextContent();

                    try (Connection con = Database.getConnection(URL + cur_db + ".db")) {
                        createTables(con);
                        jProgressBar1.setString("Inserting data to reports table...");
                        String repInsert = "INSERT INTO reports (rep_type,rep_date) VALUES (?,?)";
                        PreparedStatement stm = con.prepareStatement(repInsert);
                        stm.setString(1, repType);
                        stm.setString(2, repDate);
                        stm.execute();

                        for (int i = 0; i < maintDataNodes.getLength(); i++) {
                            jProgressBar1.setString("Inserting data to maintenance data items table...");
                            Node maintData = maintDataNodes.item(i);
                            Node idNode = (Node) XP.compile("id").evaluate(maintData, XPathConstants.NODE);
                            Node genDateNode = (Node) XP.compile("generatedOn").evaluate(maintData, XPathConstants.NODE);
                            Node descNode = (Node) XP.compile("description").evaluate(maintData, XPathConstants.NODE);
                            Node notesNode = (Node) XP.compile("notes").evaluate(maintData, XPathConstants.NODE);

                            String mdInsert = "INSERT INTO maintenanceData (md_id, gen_date, descr, notes, rep_date_ref) VALUES (?,?,?,?,?)";
                            PreparedStatement mdStm = con.prepareStatement(mdInsert);
                            mdStm.setString(1, idNode.getTextContent());
                            mdStm.setString(2, genDateNode.getTextContent());
                            mdStm.setString(3, descNode.getTextContent());
                            if (notesNode.getTextContent() != null) {
                                mdStm.setString(4, notesNode.getTextContent());
                            } else {
                                mdStm.setString(4, "");
                            }
                            mdStm.setString(5, repDate);
                            mdStm.execute();
                        }

                        for (int i = 0; i < failureNodes.getLength(); i++) {
                            jProgressBar1.setString("Inserting data to failures table...");
                            Node failureNode = failureNodes.item(i);
                            Node idNode = (Node) XP.compile("failureId").evaluate(failureNode, XPathConstants.NODE);
                            Node nameNode = (Node) XP.compile("failureName").evaluate(failureNode, XPathConstants.NODE);
                            Node ratioNode = (Node) XP.compile("failRatio").evaluate(failureNode, XPathConstants.NODE);
                            Node sysNode = (Node) XP.compile("subsystemName").evaluate(failureNode, XPathConstants.NODE);
                            Node compIdNode = (Node) XP.compile("hwComponentId").evaluate(failureNode, XPathConstants.NODE);
                            Node compFailRate = (Node) XP.compile("hwComponentFailRate").evaluate(failureNode, XPathConstants.NODE);
                            Node mtId = (Node) XP.compile("maintenanceTaskId").evaluate(failureNode, XPathConstants.NODE);

                            Node md = failureNode.getParentNode().getParentNode();
                            Node md_id = (Node) XP.compile("id").evaluate(md, XPathConstants.NODE);

                            String failInsert = "INSERT INTO failures (f_id, f_name, f_ratio, system, comp_id, comp_fail_rate, maint_task_id, maint_data_id) "
                                    + "VALUES (?,?,?,?,?,?,?,?)";

                            String rat = ratioNode.getTextContent();
                            double ratio = Double.parseDouble(rat);

                            double compF_rate = Double.parseDouble(compFailRate.getTextContent());

                            PreparedStatement f_stm = con.prepareStatement(failInsert);
                            f_stm.setString(1, idNode.getTextContent());
                            f_stm.setString(2, nameNode.getTextContent());
                            f_stm.setDouble(3, ratio);
                            f_stm.setString(4, sysNode.getTextContent());
                            f_stm.setString(5, compIdNode.getTextContent());
                            f_stm.setDouble(6, compF_rate);
                            f_stm.setString(7, mtId.getTextContent());
                            f_stm.setString(8, md_id.getTextContent());

                            f_stm.execute();
                        }

                        for (int i = 0; i < proOutNodes.getLength(); i++) {
                            jProgressBar1.setString("Gathering data to insert into procedure outputs table...");
                            Node proOut = proOutNodes.item(i);
                            Node po_id = (Node) XP.compile("procedureOutputId").evaluate(proOut, XPathConstants.NODE);
                            Node po_name = (Node) XP.compile("procedureOutputName").evaluate(proOut, XPathConstants.NODE);
                            String pon = po_name.getTextContent();
                            pon = pon.replaceAll("\\n|\\r|\\n\\r", " ");
                            pon = pon.replaceAll("\\t", " ");
                            pon = pon.replaceAll("\\s+", " ");
                            Node md = proOut.getParentNode().getParentNode();
                            Node md_id = (Node) XP.compile("id").evaluate(md, XPathConstants.NODE);

                            proOutMap.put(po_id.getTextContent(), new String[]{pon, md_id.getTextContent()});
                        }

                        for (String s : proOutMap.keySet()) {
                            jProgressBar1.setString("Inserting data into procedure outputs table...");
                            String proOutInsert = "INSERT INTO procedureOutputs (po_id, po_name, maint_data_id) VALUES (?,?,?)";

                            PreparedStatement poStm = con.prepareStatement(proOutInsert);
                            poStm.setString(1, s);
                            poStm.setString(2, proOutMap.get(s)[0]);
                            poStm.setString(3, proOutMap.get(s)[1]);

                            poStm.execute();
                        }

                        for (int i = 0; i < aliasNodes.getLength(); i++) {
                            jProgressBar1.setString("Inserting data to aliases table...");
                            Node aliasNode = aliasNodes.item(i);
                            Node aliasNameNode = (Node) XP.compile("aliasName").evaluate(aliasNode, XPathConstants.NODE);
                            Node aliasSourceNode = (Node) XP.compile("source").evaluate(aliasNode, XPathConstants.NODE);
                            Node aliasDetSysNode = (Node) XP.compile("detectingSystem").evaluate(aliasNode, XPathConstants.NODE);
                            Node aliasEvTypeNode = (Node) XP.compile("EvidenceType").evaluate(aliasNode, XPathConstants.NODE);
                            Node aliasName = (Node) XP.compile("name").evaluate(aliasNode, XPathConstants.NODE);

                            Node po = aliasNode.getParentNode().getParentNode();
                            Node po_id = (Node) XP.compile("procedureOutputId").evaluate(po, XPathConstants.NODE);

                            String aliasInsert = "INSERT INTO aliases (al_name, al_source, det_sys, evidence,name, po_ref_id) VALUES (?,?,?,?,?,?)";

                            PreparedStatement alStm = con.prepareStatement(aliasInsert);
                            alStm.setString(1, aliasNameNode.getTextContent());
                            alStm.setString(2, aliasSourceNode.getTextContent());
                            alStm.setString(3, aliasDetSysNode.getTextContent());
                            alStm.setString(4, aliasEvTypeNode.getTextContent());
                            alStm.setString(5, aliasName.getTextContent());
                            alStm.setString(6, po_id.getTextContent());

                            alStm.execute();
                        }

                        for (int i = 0; i < maintTaskIds.getLength(); i++) {
                            jProgressBar1.setString("Gathering data for maintenance tasks table...");
                            Node maintTaskIdNode = maintTaskIds.item(i);
                            Node maintTaskNameNode = (Node) XP.compile("maintenanceTaskName").evaluate(maintTaskIdNode.getParentNode(), XPathConstants.NODE);
                            String mtn = maintTaskNameNode.getTextContent();
                            mtn = mtn.replaceAll("\\n|\\r|\\n\\r", " ");
                            mtn = mtn.replaceAll("\\t", " ");
                            mtn = mtn.replaceAll("\\s+", " ");
                            maintTasks.put(maintTaskIdNode.getTextContent(), mtn.trim());
                        }

                        for (String s : maintTasks.keySet()) {
                            jProgressBar1.setString("Inserting data to maintenance tasks table...");
                            String maintTaskInsert = "INSERT INTO maintTasks (maint_task_id, maint_task_name) VALUES (?,?)";

                            PreparedStatement mt_stm = con.prepareStatement(maintTaskInsert);
                            mt_stm.setString(1, s);
                            mt_stm.setString(2, maintTasks.get(s));

                            mt_stm.execute();
                        }

                        for (int i = 0; i < hwCompIds.getLength(); i++) {
                            jProgressBar1.setString("Gathering data for hardware components table...");
                            Node hwCompIdNode = hwCompIds.item(i);
                            Node hwCompNameNode = (Node) XP.compile("hwComponentName").evaluate(hwCompIdNode.getParentNode(), XPathConstants.NODE);

                            hwComps.put(hwCompIdNode.getTextContent(), hwCompNameNode.getTextContent());
                        }

                        for (String s : hwComps.keySet()) {
                            jProgressBar1.setString("Inserting data to hardware components table...");
                            String maintTaskInsert = "INSERT INTO components (comp_id, comp_name) VALUES (?,?)";

                            PreparedStatement mt_stm = con.prepareStatement(maintTaskInsert);
                            mt_stm.setString(1, s);
                            mt_stm.setString(2, hwComps.get(s));

                            mt_stm.execute();
                        }

                        for (int i = 0; i < ibitNodes.getLength(); i++) {
                            jProgressBar1.setString("Inserting data to IBIT table...");

                            Node ibitNode = ibitNodes.item(i);
                            Node ibitNodeHwRef = (Node) XP.compile("hwComponentId").evaluate(ibitNode, XPathConstants.NODE);

                            Node md_node = ibitNode.getParentNode().getParentNode();
                            Node md_id = (Node) XP.compile("id").evaluate(md_node, XPathConstants.NODE);

                            String ibitInsert = "INSERT INTO ibits (ibit_comp_id, md_id) VALUES (?,?)";

                            PreparedStatement ibit_stm = con.prepareStatement(ibitInsert);
                            ibit_stm.setString(1, ibitNodeHwRef.getTextContent());
                            ibit_stm.setString(2, md_id.getTextContent());

                            ibit_stm.execute();
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(CRHFaultRepFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (SAXException | IOException | XPathExpressionException ex) {
                    Logger.getLogger(CRHFaultRepFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                return true;
            }

            @Override
            protected void done() {
                jProgressBar1.setString("");
                jProgressBar1.setStringPainted(false);
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setVisible(false);
            }
        };
        worker.execute();
    }

    private String getComponentName(String id) {
        try (Connection con = Database.getConnection(URL + cur_db + ".db")) {
            String query = "SELECT comp_name FROM components WHERE comp_id = ?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String name = rs.getString("comp_name");
                return name;
            }
        } catch (SQLException ex) {
            Logger.getLogger(FaultAppUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getMaintActionName(String id) {
        try (Connection con = Database.getConnection(URL + cur_db + ".db")) {
            String query = "SELECT maint_task_name FROM maintTasks WHERE maint_task_id = ?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String name = rs.getString("maint_task_name");
                return name;
            }
        } catch (SQLException ex) {
            Logger.getLogger(FaultAppUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillMaintIdInfo(String maint) {
        String mid = maint;

        List<Failure> associatedFaults = new ArrayList();
        String query = "SELECT * FROM failures WHERE maint_data_id = ? ORDER BY f_id;";
        String dmcQuery = "SELECT fr_dmc FROM maintenanceData WHERE md_id = ?;";
        String dmc = "";
        try (Connection con = Database.getConnection(URL + cur_db + ".db")) {
            PreparedStatement ps = con.prepareStatement(query);
            PreparedStatement ps1 = con.prepareStatement(dmcQuery);
            ps.setString(1, mid);
            ps1.setString(1, mid);

            ResultSet rs = ps.executeQuery();
            ResultSet rs1 = ps1.executeQuery();
            while (rs.next()) {
                String f_id = rs.getString("f_id");
                String sys = rs.getString("system");
                String comp_id = rs.getString("comp_id");//need method to query for name based on ID
                String fail = rs.getString("f_name");
                String action_id = rs.getString("maint_task_id");//need method to query for task name based on ID
                double f_ratio = rs.getDouble("f_ratio");
                double c_f_ratio = rs.getDouble("comp_fail_rate");
                //Failure(String id, String sys, String comp_name, String comp_id, String name, String act, String maintTaskID, String maintDataID, double failRate, double c_rat)
                Failure failure = new Failure(f_id, sys, getComponentName(comp_id), fail, getMaintActionName(action_id), mid, f_ratio, c_f_ratio);

                associatedFaults.add(failure);
            }

            while (rs1.next()) {
                String d = rs1.getString("fr_dmc");
                dmc = d;
            }
        } catch (SQLException ex) {
            Logger.getLogger(FaultAppUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        FailureTableModel ftm = new FailureTableModel(associatedFaults);
        jTable1.setModel(ftm);
        //jTextField1.setText(Integer.toString(associatedFaults.size()));
        //jTextField2.setText(dmc);
    }

    private void fillMaintIdInfo(int row) {
        MaintDataItemSearchTableModel tm = (MaintDataItemSearchTableModel) jTable1.getModel();
        String mid = tm.getValueAt(row, 0).toString().trim();
        //System.out.println(mid);
        fillMaintIdInfo(mid);
    }

    private void setRibbon() {
        /*
            Declare all of these items as global vars
         */
//        RichTooltip rtp = new RichTooltip();
//        rtp.addDescriptionSection("Creates a new DB in MySQL Server. Root password is requried.");
        band1a = new JRibbonBand("Create", null);
        band1 = new JRibbonBand("Updates", null);
        band2 = new JRibbonBand("Data modules", null);
        band22 = new JRibbonBand("Data Module Relationship", null);
        band23 = new JRibbonBand("System / Ambiguity Relationship", null);
        b1b = new JCommandButton("Create new DB", getIcon("database.png"));
        b1b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createNewDb();
            }
        });
        b1 = new JCommandButton("Fresh update", getIcon("database-15.png"));
        b1.setDisabledIcon(getIcon("database-15.png"));
        b1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                freshUpdate();
            }
        });
        b1a = new JCommandButton("Update and maintain DMs", getIcon("database-16.png"));
        b1a.setDisabledIcon(getIcon("database-16.png"));
        if (cur_db.equals("None")) {
            b1.setEnabled(false);
            b1a.setEnabled(false);
        } else {
            b1.setEnabled(true);
            b1a.setEnabled(true);
        }
        b2 = new JCommandButton("Compare DM content to DB", getIcon("view.png"));
        b3 = new JCommandButton("Create Data Module(s) from DB", getIcon("file-4.png"));
        band1a.addCommandButton(b1b, RibbonElementPriority.TOP);
        band1.addCommandButton(b1, RibbonElementPriority.TOP);
        band1.addCommandButton(b1a, RibbonElementPriority.MEDIUM);
        band2.addCommandButton(b2, RibbonElementPriority.TOP);
        band2.addCommandButton(b3, RibbonElementPriority.TOP);
        band1a.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(band1.getControlPanel()), new IconRibbonBandResizePolicy(band1.getControlPanel())));
        band1.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(band1.getControlPanel()), new IconRibbonBandResizePolicy(band1.getControlPanel())));
        band2.setResizePolicies((List) Arrays.asList(new CoreRibbonResizePolicies.None(band2.getControlPanel()), new IconRibbonBandResizePolicy(band2.getControlPanel())));
        band22.setResizePolicies((List) Arrays.asList(new IconRibbonBandResizePolicy(band22.getControlPanel())));
        band23.setResizePolicies((List) Arrays.asList(new IconRibbonBandResizePolicy(band23.getControlPanel())));
        task1 = new RibbonTask("Database Actions", band1a, band1, band2);
        task2 = new RibbonTask("Report Actions", band22, band23);
        menu = new AppMenu();
//        PrimaryRolloverCallback pcb = PrimaryRolloverCallback.class.newInstance();
//        pcb.
        this.getRibbon().setApplicationMenu(menu);
        this.getRibbon().addTask(task1);
        this.getRibbon().addTask(task2);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dbLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    private MaintDataItemSearchTableModel mdModel;

    private DocumentBuilderFactory DBF;
    private DocumentBuilder DB;
    private XPathFactory XPF;
    private XPath XP;
    private CatalogResolver resolver;
    private ErrorHandler eHandler;

    private JCommandButton b1;
    private JCommandButton b1a;
    private RibbonTask task1; //Database actions tab
    private RibbonTask task2; //Report actions tab
    private JRibbonBand band1a;
    private JRibbonBand band1;
    private JRibbonBand band2;
    private JRibbonBand band22;
    private JRibbonBand band23;
    private JCommandButton b1b;
    private JCommandButton b2;
    private JCommandButton b3;
    private RibbonApplicationMenu menu;

    class AppMenu extends RibbonApplicationMenu {

        private boolean testBool = false;
        private AppMenuPrimaryEntry chooseDbEntry;
        private AppMenuPrimaryEntry exitEntry;

        public AppMenu() {
            /*
            create the choose DB entry
             */
            chooseDbEntry = new AppMenuPrimaryEntry(getIcon("database-3.png"), "Choose Databse", null, JCommandButton.CommandButtonKind.ACTION_ONLY);
            /*
            create the available data base secondary entries
             */
            int c = 0;
            File[] dbs = new File("db/").listFiles();
            RibbonApplicationMenuEntrySecondary[] secEntries = new RibbonApplicationMenuEntrySecondary[dbs.length];
            for (File db : dbs) {
                String dbName = db.getName().substring(0, db.getName().indexOf("."));
                RibbonApplicationMenuEntrySecondary dbEntry = new RibbonApplicationMenuEntrySecondary(getIcon("database-1.png"), dbName, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        setDb(dbName);
                    }
                }, JCommandButton.CommandButtonKind.ACTION_ONLY);
                secEntries[c] = dbEntry;
                c++;
            }
            chooseDbEntry.addSecondaryMenuGroup("Available Databases", secEntries);
            /*
            create the exit menu entry
             */
            exitEntry = new AppMenuPrimaryEntry(getIcon("exit.png"), "Exit", new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);//To change body of generated methods, choose Tools | Templates.
                }
            }, JCommandButton.CommandButtonKind.ACTION_ONLY);

            this.addMenuEntry(chooseDbEntry);
            this.addMenuEntry(exitEntry);
//        this.addMenuEntry(new AppMenuPrimaryEntry(null,"Test",null,null));
//        this.addMenuEntry(new AppMenuPrimaryEntry(null,"Test 1",null,null));
//        this.addMenuEntry(new AppMenuPrimaryEntry(null,"Test 2",null,null));
        }

//    private ResizableIcon getIcon(String res)
//    {
//        String resource = "com/furst/faultrep/icons/" + res;
//        return ImageWrapperResizableIcon.getIcon(AppMenu.class.getClassLoader().getResource(resource), new Dimension(32,32));
//    }
    }

    class SrchRowListener implements ListSelectionListener {

        private final javax.swing.JTable jt;

        SrchRowListener(javax.swing.JTable tab) {
            this.jt = tab;
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            int[] rows = jt.getSelectedRows();
            //get maint ID from row, query for faults with that MID, fill fault table, total up the ambig, apply DMC if given
            fillMaintIdInfo(rows[0]);
        }

    }
}
